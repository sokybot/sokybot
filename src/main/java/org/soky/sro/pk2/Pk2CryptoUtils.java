package org.soky.sro.pk2;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Arrays;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ArrayUtils;


@Slf4j
public final class Pk2CryptoUtils {

	public static final byte[] HASH_TABLE1 = { 0x07, (byte) 0x83, (byte) 0xBC, (byte) 0xEE, 0x4B, (byte)0x79, 0x19, (byte) 0xB6,
			0x2A, 0x53, 0x4F, 0x3A, (byte) 0xCF, 0x71, (byte) 0xE5, 0x3C, 0x2D, 0x18, 0x14, (byte) 0xCB, (byte) 0xB6,
			(byte) 0xBC, (byte) 0xAA, (byte) 0x9A, 0x31, 0x42, 0x3A, 0x13, 0x42, (byte) 0xC9, 0x63, (byte) 0xFC, 0x54,
			0x1D, (byte) 0xF2, (byte) 0xC1, (byte) 0x8A, (byte) 0xDD, 0x1C, (byte) 0xB3, 0x52, (byte) 0xEA, (byte) 0x9B,
			(byte) 0xD7, (byte) 0xC4, (byte) 0xBA, (byte) 0xF8, 0x12, 0x74, (byte) 0x92, 0x30, (byte) 0xC9, (byte) 0xD6,
			0x56, 0x15, 0x52, 0x53, 0x60, 0x11, 0x33, (byte) 0xC5, (byte) 0x9D, 0x30, (byte) 0x9A, (byte) 0xE5,
			(byte) 0xD2, (byte) 0x93, (byte) 0x99, (byte) 0xEB, (byte) 0xCF, (byte) 0xAA, 0x79, (byte) 0xE3, 0x78, 0x6A,
			(byte) 0xB9, 0x02, (byte) 0xE0, (byte) 0xCE, (byte) 0x8E, (byte) 0xF3, 0x63, 0x5A, 0x73, 0x74, (byte) 0xF3,
			0x72, (byte) 0xAA, 0x2C, (byte) 0x9F, (byte) 0xBB, 0x33, (byte) 0x91, (byte) 0xDE, 0x5F, (byte) 0x91, 0x66,
			0x48, (byte) 0xD1, 0x7A, (byte) 0xFD, 0x3F, (byte) 0x91, 0x3E, 0x5D, 0x22, (byte) 0xEC, (byte) 0xEF, 0x7C,
			(byte) 0xA5, 0x43, (byte) 0xC0, 0x1D, 0x4F, 0x60, 0x7F, 0x0B, 0x4A, 0x4B, 0x2A, 0x43, 0x06, 0x46, 0x14,
			0x45, (byte) 0xD0, (byte) 0xC5, (byte) 0x83, (byte) 0x92, (byte) 0xE4, 0x16, (byte) 0xD0, (byte) 0xA3,
			(byte) 0xA1, 0x13, (byte) 0xDA, (byte) 0xD1, 0x51, 0x07, (byte) 0xEB, 0x7D, (byte) 0xCE, (byte) 0xA5,
			(byte) 0xDB, 0x78, (byte) 0xE0, (byte) 0xC1, 0x0B, (byte) 0xE5, (byte) 0x8E, 0x1C, 0x7C, (byte) 0xB4,
			(byte) 0xDF, (byte) 0xED, (byte) 0xB8, 0x53, (byte) 0xBA, 0x2C, (byte) 0xB5, (byte) 0xBB, 0x56, (byte) 0xFB,
			0x68, (byte) 0x95, 0x6E, 0x65, 0x00, 0x60, (byte) 0xBA, (byte) 0xE3, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, (byte) 0x9C, (byte) 0xB5, (byte) 0xD5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56, 0x43,
			0x45, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, (byte) 0xBB,
			(byte) 0xE3, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

	public static final byte[] HASH_TABLE2 = { 0x0D, 0x05, (byte) 0x90, 0x41, (byte) 0xF9, (byte) 0xD0, 0x65, (byte) 0xBF,
			(byte) 0xF9, 0x0B, 0x15, (byte) 0x93, (byte) 0x80, (byte) 0xFB, 0x01, 0x02, (byte) 0xB6, 0x08, (byte) 0xC4,
			0x3C, (byte) 0xC1, 0x49, (byte) 0x94, 0x4D, (byte) 0xCE, 0x1D, (byte) 0xFD, 0x69, (byte) 0xEA, 0x19,
			(byte) 0xC9, 0x57, (byte) 0x9C, 0x4D, (byte) 0x84, 0x62, (byte) 0xE3, 0x67, (byte) 0xF9, (byte) 0x87,
			(byte) 0xF4, (byte) 0xF9, (byte) 0x93, (byte) 0xDA, (byte) 0xE5, 0x15, (byte) 0xF1, 0x4C, (byte) 0xA4,
			(byte) 0xEC, (byte) 0xBC, (byte) 0xCF, (byte) 0xDD, (byte) 0xB3, 0x6F, 0x04, 0x3D, 0x70, 0x1C, 0x74, 0x21,
			0x6B, 0x00, 0x71, 0x31, 0x7F, 0x54, (byte) 0xB3, 0x72, 0x6C, (byte) 0xAA, 0x42, (byte) 0xC1, 0x78, 0x61,
			0x3E, (byte) 0xD5, (byte) 0xF2, (byte) 0xE1, 0x27, 0x36, 0x71, 0x3A, 0x25, 0x36, 0x57, (byte) 0xD1,
			(byte) 0xF8, 0x70, (byte) 0x86, (byte) 0xBD, 0x0E, 0x58, (byte) 0xB3, 0x76, 0x6D, (byte) 0xC3, 0x50,
			(byte) 0xF6, 0x6C, (byte) 0xA0, 0x10, 0x06, 0x64, (byte) 0xA2, (byte) 0xD6, 0x2C, (byte) 0xD4, 0x27, 0x30,
			(byte) 0xA5, 0x36, 0x1C, 0x1E, 0x3E, 0x58, (byte) 0x9D, 0x59, 0x76, (byte) 0x9D, (byte) 0xA7, 0x42, 0x5A,
			(byte) 0xF0, 0x00, (byte) 0xBC, 0x69, 0x31, 0x40, 0x1E, (byte) 0xFA, 0x09, 0x1D, (byte) 0xE7, (byte) 0xEE,
			(byte) 0xE4, 0x54, (byte) 0x89, 0x36, 0x7C, 0x67, (byte) 0xC8, 0x65, 0x22, 0x7E, (byte) 0xA3, 0x60, 0x44,
			0x1E, (byte) 0xBC, 0x68, 0x6F, 0x15, 0x2A, (byte) 0xFD, (byte) 0x9D, 0x3F, 0x36, 0x6B, 0x28, 0x06, 0x67,
			(byte) 0xFE, (byte) 0xC6, 0x49, 0x6B, (byte) 0x9B, 0x3F, (byte) 0x80, 0x2A, (byte) 0xD2, (byte) 0xD4,
			(byte) 0xD3, 0x20, 0x1B, (byte) 0x96, (byte) 0xF4, (byte) 0xD2, (byte) 0xCA, (byte) 0x8C, 0x74, (byte) 0xEE,
			0x0B, 0x6A, (byte) 0xE1, (byte) 0xE9, (byte) 0xC6, (byte) 0xD2, 0x6E, 0x33, 0x63, (byte) 0xC0, (byte) 0xE9,
			(byte) 0xD0, 0x37, (byte) 0xA9, 0x3C, (byte) 0xF7, 0x18, (byte) 0xF2, 0x4A, 0x74, (byte) 0xEC, 0x41, 0x61,
			0x7A, 0x19, 0x47, (byte) 0x8F, (byte) 0xA0, (byte) 0xBB, (byte) 0x94, (byte) 0x8F, 0x3D, 0x11, 0x11, 0x26,
			(byte) 0xCF, 0x69, 0x18, 0x1B, 0x2C, (byte) 0x87, 0x6D, (byte) 0xB3, 0x22, 0x6C, 0x78, 0x41, (byte) 0xCC,
			(byte) 0xC2, (byte) 0x84, (byte) 0xC5, (byte) 0xCB, 0x01, 0x6A, 0x37, 0x00, 0x01, 0x65, 0x4F, (byte) 0xA7,
			(byte) 0x85, (byte) 0x85, 0x15, 0x59, 0x05, 0x67, (byte) 0xF2, 0x4F, (byte) 0xAB, (byte) 0xB7, (byte) 0x88,
			(byte) 0xFA, 0x69, 0x24, (byte) 0x9E, (byte) 0xC6, 0x7B, 0x3F, (byte) 0xD5, 0x0E, 0x4D, 0x7B, (byte) 0xFB,
			(byte) 0xB1, 0x21, 0x3C, (byte) 0xB0, (byte) 0xC0, (byte) 0xCB, 0x2C, (byte) 0xAA, 0x26, (byte) 0x8D,
			(byte) 0xCC, (byte) 0xDD, (byte) 0xDA, (byte) 0xC1, (byte) 0xF8, (byte) 0xCA, 0x7F, 0x6A, 0x3F, 0x2A, 0x61,
			(byte) 0xE7, 0x60, 0x5C, (byte) 0xCE, (byte) 0xD3, 0x4C, (byte) 0xAC, 0x45, 0x40, 0x62, (byte) 0xEA, 0x51,
			(byte) 0xF1, 0x66, 0x5D, 0x2C, 0x45, (byte) 0xD6, (byte) 0x8B, 0x7D, (byte) 0xCE, (byte) 0x9C, (byte) 0xF5,
			(byte) 0xBB, (byte) 0xF7, 0x52, 0x24, 0x1A, 0x13, 0x02, 0x2B, 0x00, (byte) 0xBB, (byte) 0xA1, (byte) 0x8F,
			0x6E, 0x7A, 0x33, (byte) 0xAD, 0x5F, (byte) 0xF4, 0x4A, (byte) 0x82, 0x76, (byte) 0xAB, (byte) 0xDE,
			(byte) 0x80, (byte) 0x98, (byte) 0x8B, 0x26, 0x4F, 0x33, (byte) 0xD8, 0x68, 0x1E, (byte) 0xD9, (byte) 0xAE,
			0x06, 0x6B, 0x7E, (byte) 0xA9, (byte) 0x95, 0x67, 0x60, (byte) 0xEB, (byte) 0xE8, (byte) 0xD0, 0x7D, 0x07,
			0x4B, (byte) 0xF1, (byte) 0xAA, (byte) 0x9A, (byte) 0xC5, 0x29, (byte) 0x93, (byte) 0x9D, 0x5C, (byte) 0x92,
			0x3F, 0x15, (byte) 0xDE, 0x48, (byte) 0xF1, (byte) 0xCA, (byte) 0xEA, (byte) 0xC9, 0x78, 0x3C, 0x28, 0x7E,
			(byte) 0xB0, 0x46, (byte) 0xD3, 0x71, 0x6C, (byte) 0xD7, (byte) 0xBD, 0x2C, (byte) 0xF7, 0x25, 0x2F,
			(byte) 0xC7, (byte) 0xDD, (byte) 0xB4, 0x6D, 0x35, (byte) 0xBB, (byte) 0xA7, (byte) 0xDA, 0x3E, 0x3D,
			(byte) 0xA7, (byte) 0xCA, (byte) 0xBD, (byte) 0x87, (byte) 0xDD, (byte) 0x9F, 0x22, 0x3D, 0x50, (byte) 0xD2,
			0x30, (byte) 0xD5, 0x14, 0x5B, (byte) 0x8F, (byte) 0xF4, (byte) 0xAF, (byte) 0xAA, (byte) 0xA0, (byte) 0xFC,
			0x17, 0x3D, 0x33, 0x10, (byte) 0x99, (byte) 0xDC, 0x76, (byte) 0xA9, 0x40, 0x1B, 0x64, 0x14, (byte) 0xDF,
			0x35, 0x68, 0x66, 0x5B, 0x49, 0x05, 0x33, 0x68, 0x26, (byte) 0xC8, (byte) 0xBA, (byte) 0xD1, (byte) 0x8D,
			0x39, 0x2B, (byte) 0xFB, 0x3E, 0x24, 0x52, 0x2F, (byte) 0x9A, 0x69, (byte) 0xBC, (byte) 0xF2, (byte) 0xB2,
			(byte) 0xAC, (byte) 0xB8, (byte) 0xEF, (byte) 0xA1, 0x17, 0x29, 0x2D, (byte) 0xEE, (byte) 0xF5, 0x23, 0x21,
			(byte) 0xEC, (byte) 0x81, (byte) 0xC7, 0x5B, (byte) 0xC0, (byte) 0x82, (byte) 0xCC, (byte) 0xD2,
			(byte) 0x91, (byte) 0x9D, 0x29, (byte) 0x93, 0x0C, (byte) 0x9D, 0x5D, 0x57, (byte) 0xAD, (byte) 0xD4,
			(byte) 0xC6, 0x40, (byte) 0x93, (byte) 0x8D, (byte) 0xE9, (byte) 0xD3, 0x35, (byte) 0x9D, (byte) 0xC6,
			(byte) 0xD3, 0x00, };

	private Pk2CryptoUtils(){}


	public static final byte[] ENCRYPTED_TEXT_FOOTER = new byte[] { 0x0D, 0x00, 0x0A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x65, 0x00, 0x6E,
			0x00, 0x63, 0x00, 0x72, 0x00, 0x79, 0x00, 0x70, 0x00, 0x74, 0x00 };


	public static final  int INITIAL_BLOWFISH_KEY = 0x8C1F;

	public static boolean isEncrepted(byte[] buffer) {
		if (buffer.length > 24) {
			if (buffer[0] == (byte) 0xE2 || buffer[1] == (byte) 0xB0) {
				
				return (Arrays.equals(ENCRYPTED_TEXT_FOOTER, ArrayUtils.subarray(buffer, buffer.length - 22, buffer.length)));

			}
		}
		return false;
	}


	public static boolean isEncryptedTextFile(final JMXFile jmxFile ) throws IOException {

		int jmxFileSize = jmxFile.getSize() ;
		String pk2FilePath = jmxFile.getPkFilePath() ;
		long startLocation = jmxFile.getPosition() ;

		if(jmxFileSize < Pk2CryptoUtils.ENCRYPTED_TEXT_FOOTER.length + 2) {
			log.debug("JmxFile {} size is smaller than ENCRYPTED_TEXT_FOOTER_STATEMENT  plus 2 bytes flag {}  " ,jmxFile.getName() , ENCRYPTED_TEXT_FOOTER.length + 2 );
			return false  ;
		}

		ByteBuffer buffer = ByteBuffer.allocate(2) ;
		FileChannel channel =  FileChannel.open(Paths.get(pk2FilePath) , StandardOpenOption.READ) ;
		channel.position(startLocation) ;  // jump to jmxFile Start location
		channel.read(buffer) ;  // read the first two bytes from this location
		if (buffer.get(0) == (byte) 0xE2 || buffer.get(1) == (byte) 0xB0) {
			long encFileFooterLocation =startLocation + (jmxFileSize - ENCRYPTED_TEXT_FOOTER.length) ;
			channel.position(encFileFooterLocation) ;
			buffer = ByteBuffer.allocate(ENCRYPTED_TEXT_FOOTER.length) ;
			channel.read(buffer) ;
			buffer.rewind();
			channel.close();
			return (buffer.compareTo(ByteBuffer.wrap(ENCRYPTED_TEXT_FOOTER)) == 0) ;
			//channel.position() ; // jump to the last Pk2CryptoUtils.footer.length
		}else {
		 log.debug("File {} is not encrypted , flags not exists" , jmxFile.getName());
		 channel.close();
		}

		return false ;
	}

	public static byte[] decrypt(byte[] buffer  , int blowfishKey) {

		int key  = blowfishKey ;


		for (int i = 0; i < buffer.length ; i++) {
			byte buff = (byte) (HASH_TABLE1[key % 0xA7] - HASH_TABLE2[key % 0x1EF]);
			key++;
			buffer[i] += buff;

		}

		return buffer ;
	}

	/*
	 * This method check whether buffer is encrypted or not 
	 * if buffer is encrypted it will decrypt all bytes within the same 
	 * buffer and return it
	 * 
	 * please note that the returned buffer include the encryption footer 
	 * which is '\\n //encrypted ' 
	 * 
	 * all buffer bytes encoded by UTF-16LE char set
	 * 
	 */

	public static byte[] decrypt(byte[] buffer) {

		boolean isEncrypted = false;
		int blowfishKey = INITIAL_BLOWFISH_KEY;

		if (buffer[0] == (byte) 0xE2 && buffer[1] == (byte) 0xB0) {
			isEncrypted = true;
		}

		if (isEncrypted) {

			for (int i = 0; i < buffer.length - 22; i++) {
				byte buff = (byte) (HASH_TABLE1[blowfishKey % 0xA7] - HASH_TABLE2[blowfishKey % 0x1EF]);
				blowfishKey++;
				buffer[i] += buff;

			}

		}

		return buffer;
	}

	
	
}
